https://prashhantss.hashnode.dev/automating-with-ansible-day-1

Ansible
===========
ansible is an opensource configuration management tool and also we can use as a Deployment tool,provided by redhat.

Configuration is some task which we want to execute on the server, it can be 

1) CReating Users/Groups ..etc
2)Installing and removing a software/package
3)creating/updating/copying files.
4) start/stop services .etc

Configuration Management tools
Ansible
Chef
Puppet
Saltstack

Two types configuration management tools
=============================================
Push based configuration --> server only push to hosts (Ansible)
Ansible Agent less configuration,Ansible written in a python language.
Pull based configuration --> host only pull from server( with agent software pull) (Chef,Puppet)

Terraform -->Infrastructure as a code
we can provision /modify/destory infrastructure(Network,Servers,storage..etc)


can we install Ansible in windows machine or is Ansible Machine(controller) can be a windows?
No
can we configue windows using ansible?
yes, we can configure windows machine using ansible.

What can Ansible do?
cofiguration management
Continuous delivery

why ansible?
Predefined modules/functionalities.
yml based scripts.
Idempotent(all ready configuration is done it's not modified any thing)
Push Based and Agent less.

Ansible Components:
=====================
Host Inventory --> we can maintain deatils of host machines(Servers) to configure. we can list and group servers(Host Machines)
Two types of Host incentory
----------------------------
Satic Inventory --> It's a file in which we can list host(server)details like IP/HostName, User Name,Password ..etc, we can group the servers.
Default location or path of Host inventory --> /etc/ansible/hosts
Dynamic Inventory --> it's a Script(Python/Sheel) which will fetch host details dyanmically from external source like from Cloud provider, databses etc.

Connection Plugins
-------------------
SSH --> Linux
WINRM -->windows Remote Machine

Playbooks --> It's yaml basedvscript (configuration), play book contains atsks which you want to perform on the servers.
we will usse ansible modules to write the tasks.
Sample:
-hosts: all
 tasks:
 - name: create a user
   user:
    name: mithun
    create_home: yes
    password: Naveen@123
    group: <groupName>

Ansible configuration
------------------------
Create 3 servers 1 for ansible servers 2 for hosts
create Ansible user in server, give user name like ansible,sudo useradd ansible, and give password,sudo passwd ansible,Password Princy@#$2024
bydafult password based authentication not enable in aws,so we have to enable, go to sudo vi /etc/ssh/sshd_config
 keep like this # To disable tunneled clear text passwords, change to no here!
PasswordAuthentication yes
#PermitEmptyPasswords no
#PasswordAuthentication no
restart the service sudo service sshd restart, it will restart service.
giving sudo access to ansible user, give sudo visudo,
## Read drop-in files from /etc/sudoers.d (the # here does not mean a comment)
#includedir /etc/sudoers.d
ansible  ALL=(ALL)  NOPASSWD: ALL
ec2-user  ALL=(ALL)  NOPASSWD: ALL

login ansible user like sudo su ansible, required to install python, sudo yum install python3-pip -y,(It's a python package manager)
Update package Manager
sudo yum update -y
install EPEL Repository on RHEL
sudo dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
sudo amazon-linux-extras install ansible2 -y
confirm EPEL installation
sudo dnf repolist epel
Ansible To we user Ansible playbook to deploy itself so we also need ansible installed.
sudo yum -y install ansible vim curl

sudo yum install python3 -y
python3 --version
sudo yum -y install python3-pip
pip3 install ansible --user
ansible --version



sudo amazon-linux-extras install ansible2
ansible --version
python --version

sudo chown ansible:ansible -R /etc/ansible/ change permission
cd /etc/ansible
vi hosts in this add private ip address
# ungrouped hosts below give ip
172.31.1.200
172.31.1.0

ansible all -m ping for checking ping, wiil get verify first time host key verification, 
where we have to disable this, vi /etc/ansible/ansible.cfg, #host_key_checking = False  to uncomment,
-------------------------------------------------------------------
how to make ssh
===================
vi /etc/ansible/hosts
172.31.1.200 ansible_user=ec2-user
172.31.1.0 ansible_user=ec2-user

vi ~/ansiblep.pem
add the key
vi /etc/ansible/hosts
172.31.1.200 ansible_user=ec2-user ansible_ssh_private_key_file=~/ansiblep.pem
172.31.1.0 ansible_user=ec2-user ansible_ssh_private_key_file=~/ansiblp.pem

check this command later    ansible all -m ping
the private key have wide permissions
chmod 400 ~/ansiblep.pem
now  will able to do access ssh connection
---------------------------------------------------------------------------
cat /etc/passwd                        for checking users
userdel  username                      for deleting
 ps aux | grep 3714                    for checking ansible user
 
pwd /home/ansible/git/ansible-scripts
home/ansible/git/ansible-scripts/

vi createuser.yml
-------------------------------------------------------------------------------
 hosts: all
  tasks:
  - name: Create ansible User
    user: 
      name: ansible
      create_home: true
      shell: /bin/bash
      comment: "Ansible Management Account"
      expires: -1
      password: "{{ 'Princy@#$2023' | password_hash('sha512','A512') }}"
  - name: setup Sudo Access for ansible User
    copy:
      dest: /etc/sudoers.d/ansible
      content: 'ansible ALL=(ALL) NOPASSWD:ALL'
      validate: /usr/sbin/visudo -cf %s
  - name: Disable Password Authentication
    lineinfile:
      dest=/etc/ssh/sshd_config
      regexp='^passwordAuthentication'
      line="passwordAuthentication yes"
      state=present
      backup=yes
    notify:
      - restart ssh
  handlers:
    - name: restart ssh
      service:
        name=sshd
        state=restarted
 ---------------------------------------------------------------------       
for execute the yml file with below command
ansible-playbook creatyser.yml
ansible-playbook  -b creatyser.yml --> become sudo user, mention need in plablook become: true or yes
---------------------------------------------------------------------

how to make ssh connection
--------------------------
vi /etc/ansible/hosts
#172.31.1.200 ansible_user=ec2-user ansible_ssh_private_key_file=~/ansible.pem
#172.31.1.0 ansible_user=ec2-user ansible_ssh_private_key_file=~/ansible.pem

vi /etc/ansible/hosts
172.31.1.200 ansible_user=ansible ansible_password=Princy@#$2023
172.31.1.0 ansible_user=ansible ansible_password=Princy@#$2023
ansible all -m ping        make a shh connection
---------------------------------------------------------------------------------
ssh-keygen in ansible server user
========================================
ssh-keygen     generate ssh key with ansible user in ansible server
ls .ssh/
id_rsa  id_rsa.pub known_hosts    ---> ssh key generated, without password and pem file you can use ssh key to connecting hosts.

- hosts: all
  tasks:
  - name: Create ansible User
    user: 
      name: ansible
      create_home: true
      shell: /bin/bash
      comment: "Ansible Management Account"
      expires: -1
      password: "{{ 'Princy@#$2023' | password_hash('sha512','A512') }}"
  - name: Deploy Local user SSH Key
    authorized_key:
       user: ansible
       state: present
       manage_dir: true
       key: "{{ lookup('file', '/home/ansible/.ssh/id_rsa.pub') }}"
  - name: setup Sudo Access for ansible User
    copy:
      dest: /etc/sudoers.d/ansible
      content: 'ansible ALL=(ALL) NOPASSWD:ALL'
      validate: /usr/sbin/visudo -cf %s
  - name: Disable Password Authentication
    lineinfile:
      dest=/etc/ssh/sshd_config
      regexp='^passwordAuthentication'
      line="passwordAuthentication no"
      state=present
      backup=yes
    notify:
      - restart ssh
  handlers:
    - name: restart ssh
      service:
        name=sshd
        state=restarted

vi /etc/ansible/hosts 
#172.31.22.204 ansible_user=ec2-user ansible_ssh_private_key_file=~/ans.pem
#172.31.22.204 ansible_user=ansible ansible_password=Princy@#$2022
172.31.22.204

#172.31.28.220 ansible_user=ec2-user ansible_ssh_private_key_file=~/ans.pem
#172.31.28.220 ansible_user=ansible ansible_password=Princy@#$2022
172.31.28.220

ansible all -m ping
--------------------------------------------------------------------------------------
Group the server
==================
[appserver] grouping server
172.31.22.204
172.31.28.220

i have one server which doe's not have anygroup, where should i define that in host inventory?
ungrouped servers define before any group header start.

vi /etc/ansible/hosts   --> default host inventory path

how to we made host inventory in different path?
you can update in ansible.cfg file (or) ansible --inventory-file <innventory file path> -m <module>
ansible -i  <innventory file path> -m <module>
ansible --inventoryfile <path> -m <module>
ansible -i <path> -m <module>
-----------------------------------------------------------------------

ansible <all/groupName/hostname> -m <module> -a <args>  --> this command for configuration using command also
ansible all -m ping                                     --> all servers and modules will ping like ssh connetivity
ansible-doc -l                                          --> for checking modules
ansible-doc -l <module>                                 --> moredetail about module
ansible-doc -l | grep "copy"                            -->

ansible-doc shell                                         --> shell module list of space-delimited arguments
ansible all -m shell -a "git --version"                   --> via checking shell module show git version in all machines
ansible all -m shell -a "date"                            --> via checking shell module show date in all machines
ansible all -m shell -a "df -kh"                          --> via checking shell module show file system in all machines
ansible all -m shell -a "cat /etc/*release*"                --> via checking shell module show OS information in all machine
ansible all -m shell  -b -a "yum install git -y"          -->  via checking shell module install git in all machine
ansible appservers -m shell  -b -a "yum install git -y"   -->  via checking shell module install  git in group(appserver) machines
ansible 172.89.12.13 -m shell  -b -a "yum install git -y" -->  via checking shell module install  git in particular ip machine

ansible all -m yum -a "name=git state=present"            -->
ansible all -m yum -b -a "name=git state=absent"          -->
ansible all -m yum -b -a "name=git state=latest"          -->
ansible all -m yum -b -a "name=git-2.0.1 state=present"   -->        install git software
ansible all -m yum -b -a "name=git state=absent"          -->        remove gitsoftware
ansible all -m apt -a "name=git state=present"            -->        

irresepective of underlying os which module you can use to manage packages using package manager in ansible?

package
 using ansible perform below configurations on appservers.
 ansible appserver -m yum -b -a "name=httpd state=present"
 
 install httpd software
 ansible appserver -m yum -b -a "name=httpd state=present"
  ansible all -m yum -b -a "name=httpd state=present"
 copy index.html file
 ansible all -m copy -b -a "src=/home/ec2-user/index.html dest=/var/www/html/index.html"    --> copying file from source to destination
 ansible all -m copy -b -a "src=/home/ec2-user/index.html dest=/var/www/html/index.html remote_src: yes" --> with in the server copy file
 scp 
 start httpd service
ansible-doc -l | grep "get_url"                                                                            --> download urls
ansible all -b -m service -a "name=httpd state=started/restarted/stopped"

- hosts: all
  tasks:
    - name: Install httpd
      yum:
        name: httpd
        state: present

    - name: Copy index.html
      copy:
        src: /home/ansible/index.html
        dest: /var/www/html/index.html

    - name: Start httpd service
      service:
        name: httpd
        state: started
  
sudo ansible-playbook httpd.yml --syntax-check 
    
how do u dry run ansible play book or what is dry in run in ansible?
it is kind of mock run, it is like trail it is work or run, it is kind of simulation.
ansible-playbook installhttpd.yml
ansible-playbook installhttpd.yml --check

what is verbose or how do run playbook in verbose?
verbos is like kind of a debugation, it is going to give some additional information while executing playbook,
it is going to give some additional logs while executing playbook.
ansible-playbook installhttpd.yml -v single verbose
ansible-playbook installhttpd.yml -vv  double verbose -->it is going to give more detail

ansible-playbook installhttpd.yml --step  --> confirmation for next tasks

ansible all -m setup   ---> in task internally use module called setup.

This playbbok will install HTTP server and start the server.
---
- hosts: all
become: true
tasks:
- name: Install Apache HTTP server
yum: name=httpd update_cache=yes state=latest
- name: Start HTTP Server
service: name=httpd enabled=yes state=started
---------------------------------------------------------------------------------
Handlers
===========
tasks ---> task will by default execute one after the other.
Handlers --> Handlers also special kind of tasks, handlers will not execute by default.
some task has to notify the handler.then handlers will be executed at the end of the play(After executing all the tasks).
the task which notified the handler should be changed then only handler will be executed.

=======================================================================
- hosts: all
  become: true
  gather_facts: no
  tasks:
    - name: Install httpd
      yum:
        name: httpd
        state: present

    - name: Copy index.html
      copy:
        src: /home/ansible/index.html
        dest: /var/www/html/index.html
      notify:
        - Start httpd service
    - name: Debug message
      debug:
        msg: "After Copy Task"
  handlers:
    - name: Start httpd service
      service:
        name: httpd
        state: started
 ================================================================================================
        
Templates -->
=================
Runtime variables
playbook variables
group variables --
host variables
Role varaibles
ansible_doc template

vi index.html
hello all added handlers {{name}}

ansible-playbook handlers.yml  --extra-vars name=naveen

ansible-playbook handlers.yml --list-hosts ---> it will refer for how many server using
playbook: handlers.yml

  play #1 (all): all    TAGS: []
    pattern: [u'all']
    hosts (2):
      172.31.28.220
      172.31.22.204
     
     =====================================================================
- hosts: all
  become: true
  gather_facts: no
  vars:
    package_name: httpd
    name: naveen
  tasks:
    - name: Install httpd
      yum:
        name: "{{package_name}}"
        state: present

    - name: Copy index.html
      template:
        src: /home/ansible/index.html
        dest: /var/www/html/index.html
      notify:
        - Start httpd service

    - name: Debug message
      debug:
        msg: "After Copy Task name variable value: {{name}}"

  handlers:
    - name: Start httpd service
      service:
        name: "{{package_name}}"
        state: started
        =====================================================================================================
      
----------------------------------------------------------------------------------
TAGS
=====
TAGS --> Tags applied to the task or included tasks, this allows selecting subsets of tasks from the command line.
tags will execute top to bottom

ansible@ip-172-31-19-21 ansible-scripts]$ ansible-playbook TAGS.yml --list-tags

playbook: TAGS.yml
   play #1 (all): all    TAGS: []
      TASK TAGS: [copy, debug, install]
  
  ansible-playbook sampleplaybook.yaml --list-tags: It will display all available tags in specified playbook.
  ansible-playbook sampleplaybook.yml --tags "install,start" : This command will run the tags install and start.
  ansible-playbook sampleplaybook.yml --skip-tags "install": This command will skip the tags specified tags, install.

ansible-playbook TAGS.yml --tags "debug,copy" --> 
ansible-playbook TAGS.yml --skip-tags "debug" -->

install jenkins using ansible playbook
----------------------------------------
- hosts: jenkinsServer
  become: yes
  tasks:
  - name: Download Long Term Jenkins release
    get_url:
      url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
      dest: /etc/yum.repos.d/jenkins.repo
  - name: Import jenkins key from url
    rpm_key:
      state: present
      key: https://pkg.jenkins.io/redhat-stable/jenkins.io.key
  - name: Install java
    yum:
      name: java-1.8.0*
      state: present
  - name: Install Epel Relaase which has daemonize  dependency which is required for Jenkins.
    yum:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      state: present
      disable_gpg_check: true
  - name: Install jenkins
    yum:
      name: jenkins
      state: latest
      skip_broken: yes
  - name: Start Jenkins
    service:
      name: jenkins
      state: started
  - name: enable jenkins
    systemd:
     name: jenkins
     enabled: true
  - name: sleep for 30 seconds and continue with play
    wait_for:
     delay: 30
     port: 8080
  - name: init password jenkin
    shell: cat /var/lib/jenkins/secrets/initialAdminPassword
    changed_when: false
    register: result
  - name: print init password jenkins
    debug:
     var: result.stdout

ansible-doc -l | grep "jenkins" --> it will show jenkins_plugins
---------------------------------------------------------------

Loops
=====
1) install wget,zip,unzip softwares
- host: all
  tasks:
  - name: install wget
    yum:
     name: wget
     state: present
   - name: install zip
    yum:
     name: zip
     state: present 
   - name: install unzip
    yum:
     name: unzip
     state: present

using loops -->Instead of using a loop to supply multiple items 
and specifying like name: "{{ item }}", use name: ['httpd', 'wget', 'vim', 'zip, 'unzip'] as follows
----------------
- hosts: all
  tasks:
  - name: install softwares
    yum:
     name: "{{item}}"
     state: present
    with_items:
    - wget
    - zip
    - unzip
Depricated with yum module

Anothe way 
--------------------------------
 hosts: all
  tasks:
  - name: install softwares
    yum:
     name: ['wget','zip','unzip']
     state: present
    
Create Naveen,princy users
---------------------------------
- hosts: all
  tasks:
  - name: create Naveen user
    user:
      name: Naveen
      create_home: yes
      group: dev
  - name: create princy user
    user:
      name: princy
      create_home: yes
      group: dev
------------------------------
- hosts: all
 tasks:
- name: create Naveen user
  user:
    name: "{{item}}"
    create_home: yes
    group: dev
 with_items:
 - Naveen
 - princy
----------------------------------------
- hosts: all
  tasks:
- name: create Naveen user
  user:
    name: "{{item.username}}"
    create_home: "{{item.home}}"
    group:  "{{item.group}}"
 with_items:
 - {"username": "Naveen","group": "dev", "home": "yes"}
 - {"username": "princy","group": "admin", "home": "no"}
-----------------------------------------------------------
- hosts: all
  tasks:
- name: create Naveen user
  user:
    name: "{{item.username}}"
    create_home: "{{item.hoeme}}"
    group:  "{{item.group}}"
 with_items:
 - {"username": "Naveen","group": "dev", "home": "yes"}
 - {"username": "princy","group": "admin", "home": "no"}
- name: copy files
  copy:
   src: "{{item.src}}"
   dest: "{{item.dest}}"
   mode: "{{item.mode}}"
   owner: "{{item.owner}}"
 with_items:
 - {"src": "/home/ansible/test.txt", "dest": "/tmp/test.txt", "mode": "0655", "owner": "ansible"}
 - {"src": "/tmp/abc.txt", "dest": "/opt/abc.txt", "mode": "0777", "owner": "ansible"}
 ===============================================================================================================


- hosts: all
  become: true
  tasks:
    - name: copy files
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        mode: "{{item.mode}}"
        owner: "{{item.owner}}"
      with_items:
        - {"src": "/home/ansible/test.txt", "dest": "/tmp/test.txt", "mode": "0655", "owner": "ansible"}
        - {"src": "/tmp/abc.txt", "dest": "/opt/abc.txt", "mode": "0777", "owner": "ansible"}
=================================================================================================================================
 
------------------------------------------------------------------------------------------------
conditions (vi conditions.yml)
===============================
- hosts: all
  become: true
  tasks:
    - name: Print OS Family
      debug:
        var: ansible_facts['os_family']

    - name: install tree in RedHat
      yum:
        name: tree
        state: present
      when: ansible_facts['os_family'] == "RedHat"

    - name: install tree in Debian
      apt:
        name: tree
        state: present
      when: ansible_facts['os_family'] == "Debian"

--------------------------------------------------------   
conditionals2.yml

- hosts: all
  become: true
  tasks:
    - name: Check if Java is installed
      shell: java -version 2>&1 | grep version | awk '{print $3}' | sed 's/"//g'
      register: java_version
      ignore_errors: true

    - name: Print Java version
      debug:
        msg: "{{ java_version.stdout }}"

    - name: Install Java if not already installed
      yum:
        name: java-1.8.0-amazon-corretto-devel
        state: present
      when: java_version.stdout == ""

  --------------------------------------------------------------------------------      
conditions3.yml

- hosts: all
  become: true
  tasks:
    - name: Check if java is installed
      shell: java -version 2>&1 | grep version | awk '{print $3}' | sed 's/"//g'
      register: java_version
      ignore_errors: True
    - name: print java_version
      debug:
         msg: "{{java_version}}"
    - name: install java if not already installed
      yum:
        name: java-1.8.0-amazon-corretto-devel
        state: present
      when:
      - ansible_facts['os_family'] == "RedHat"
      - java_version.stdout == ""
-----------------------------------------------------------------------------------
Variables
==============

Runtime Vars
playbook vars --> Scope of the variables is with in the play book. we can refer version the tasks
or templates which we are using the playbook.

---
- hosts: all
  tasks:
    - name: vars demo
      debug:
        msg: "var test value: {{ test }}"

    - name: copy file
      template:
        src: test.txt
        dest: /tmp/test.txt

    - name: cat the file
      shell: "cat /tmp/test.txt"
      register: output

    - name: print file content
      debug:
        msg: "file content {{ output.stdout }}"


Group Vars --> where ever you  have host inventory with in that create folder called group_vars.
db servers
abc

app servers
xyz

Host Vars
 ansible-playbook varsdemo.yml --extra-vars "test=abc"

Ansible Vault
===============
A typical Ansible setup will involve needing some sort of secret to fully setup a server or application.Common types of "secret" include passwords, SSH keys, SSL certificates, API tokens and anything else you don't want the public to see.
Since it's common to store Ansible configurations in version control, we need a way to store secrets securely.
Ansible Vault is the answer to this. Ansible Vault can encrypt anything inside of a YAML file, using a password of your choice.

ansible-vault create <filename>.yml --> it will create a file and encrypt
ansible-vault encrypt <filename>.yml --> it will encrypt existing file
ansible-vault view <filename>.yml
ansible-vault edit <filename>.yml
ansible-vault decrypt <filename>.yml
ansible-vault rekey <filename>.yml  --> to update vault new password means changing password.

sudo vi /etc/ansible/group_vars/all.yml

Step1: Create group variables for all groups.
Add your password (Key value pair) in group variables yml
vi /etc/ansible/group_vars/all.yml
user_password: Princy@#$2023
test: abc
cat /etc/ansible/group_vars/all.yml
Step 2: Encrypt existing group variables yml file using ansible vault
The typical use case is to have a normal, plaintext variable file that we want to encrypt. Using
ansible-vault, we can encrypt this and define the password needed to later decrypt it:
ansible-vault encrypt /etc/ansible/group_vars/all.yml
give vault password like Princy@123 after check cat /etc/ansible/group_vars/all.yml encrpted or not
sudo chmod u+w /etc/ansible/group_vars/all.yml

Step 3:
Update your host inventory to refer password from group_vars/all.yml file make sure you use the same key name which you defined in group_vars/all.yml.
Step 4: Execute ansible adhoc command ping to test the connectivity.
We will get error since we are referring password from group_vars/all.yml which is encrypted using vault. So, while executing play book or adhoc commands we must pass ansible vault password what ever
You have typed in while encrypting.
verify configure yml file ansible-playbook creatssh.yml, will get error like this, 
ERROR! Attempting to decrypt but no vault secrets found
to be execute ansible-playbook creatssh.yml --ask-vault-pass, it will ask vault password and provide it will execute
without giveing vault password create one file give the vault password
vi vaultpass give password  vi vaultpass and execute 
ansible-playbook creatssh.yml --vault-password-file=~/vaultpass,
my password need to update cat /etc/ansible/group_vars/all.yml
ansible-vault view /etc/ansible/group_vars/all.yml  who knows the vault password that person need to login
ansible-vault edit /etc/ansible/group_vars/all.yml edit file if you want






















Ansible Role --> role is nothing but set of tasks to configure a host to serve a certain purpose like configuration service.
==================
with more complexity in functionality it's very diffcult to maintain everything in a playbook.
typically play book conatains.
Tasks
Handlers
Vars
template
files

-ves
Readability
Maintainbility
sharability

install httpd,jenkins

installhttpd.yml
---------------
- hosts: all
  gather_facts: no
  become: true
  vars:
    package_name: httpd
    name: naveen
  tasks:
  - name: install httpd
    yum:
      name: "{{package_name}}"
      state: present
    tags:
    - install
  - name: copy index.html
    template:
      src: /home/ansible/git/ansible-scripts/index.html
      dest: /var/www/html/index.html
    notify:
    - start httpd service
    tags:
    - copy
  - name: Debug message
    debug:
      msg: "After copy task name variable value: {{name}}"
    tags:
    - debug
    - install
  handlers:
  - name: start httpd service
    service:
      name: "{{package_name}}"
      state: started

ansible-galaxy init <rolename>
ansible-galaxy init httpd --> create role

Rols Vars
deafult 



vi installhttpdRole.yml
- hosts: all
  become: true
  roles:
  - httpd
 
ansible-playbook installhttpdRole.yml
ansible-playbook installhttpdRole.yml --ask-vault-pass
git clone https://github.com/MithunTechnologiesDevOps/AnsibleRoles.git


dynamic inventory
==================
terraform install
-----------------
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform
export PATH=$PATH:/usr/local/bin
vi .bashrc
source .bashrc















