Terraform
==================
provider "aws" {

region = "ap-south-1"
access_key = ""
secret_key = ""
profile = "default"

}
resource "aws_instance" "os1" {
ami = "ami id"
instance_type = "t2.micro"
tags = {
   Name = "my first TF OS 11"
   }
}

output "my_public_ip_is" {
value = aws_instance.os1.my_public_ip
}

output "my_az_is" {
value = aws_instance.os1.availability_zone
}

resource "aws_ebs_volume" "st1" {
availability_zone = aws_instance.os1.availability_zone
size              = 10

tags = {
  Name = "Linuxworld HD new"
  }
}
output "02"{
value = aws_ebs_volume.st1
}

resource "aws_volume_attachment" "st1"{
  device_name = "/dev/sdh"
  volme id    = aws_ebs_volume.st1
  instance_id = aws_instance.os1.id
}
----------------------------------------------------------
provider "aws" {

region = "ap-south-1"
access_key = "AKIAZJDVQQJ6G2SGXN74"
secret_key = "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"


}
resource "aws_instance" "os1" {
ami = "ami-0c768662cc797cd75"
instance_type = "t2.micro"
tags = {
   Name = "my first TF OS 1"
   }
}
---------------------------------------------------------
vi first.tf
terraform init
terraform apply first.tf
==========================================
ami- id
t2.micro
SG: webport-allow 80
terraform_key.pem
public ip
ssh -1 ec2-user -i terraform_key.pem public_ip
sudo yum install httpd -y 
sudo yum install php -y
sudo systemctl start httpd
sudo systemctl enable httpd
--------------------------------
w -- how many users login
rpm -q php
rpm -q httpd
--------------------
string interpolation
vi ec2.tf
---------
variable "x"{
  type = string
  default = "linux world"
}
output "myvalue"{
  value = "x"
}
--------------------------------
variable "x"{
  type = string
  default = "linux world"
}
output "myvalue"{
  value = "var.x"
}
----------------------------------------
aws configure list-profiles
--------------------------------------------------
vi first.tf
-----------

provider "aws" {

region = "ap-south-1"
profile = "default"

}
resource "aws_instance" "os1" {
ami = "ami-0c768662cc797cd75"
instance_type = "t2.micro"
tags = {
   Name = "my first TF OS 1"
   }
}

output "my_public_ip"{
value = aws_instance.os1.public_ip
}

output "my_az_is"{
value = aws_instance.os1.availablity_zone
}

resource "aws_ebs_volume" "st1" {
availability_zone = aws_instance.os1.availability_zone
size              = 10

tags = {
  Name = "Linuxworld HD new"
  }
}

output "o2"{
value = aws_ebs_volume.st1
}

resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volme id    = aws_ebs_volume.st1
  instance_id = aws_instance.os1.id
}

output "o3" {
value = aws_volume_attachment.ebs_att
}
====================================================================================================================

vi ssh.tf
---------

provider "aws" {
  region = "ap-south-1"
}

resource "aws_instance" "p1" {
  ami             = "ami-0b08bfc6ff7069aff"
  instance_type   = "t2.micro"
  security_groups = ["launch-wizard-1"]
  key_name        = "terraform1"
  tags = {
    Environment = "dev"
    Name        = "dev-1"
  }
  connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/root/terraform2.pem")
    host        = aws_instance.p1.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd -y",
      "sudo yum install php -y",
      "sudo systemctl start httpd",
    ]
  }

}
=====================================================================================================================================

--------------------------------------------------------
-----------------------------------------------------
ami- id
t2.micro
SG: webport-allow 80
terraform_key.pem
public ip
ssh -1 ec2-user -i terraform_key.pem public_ip
sudo yum install httpd -y 
sudo yum install php -y
sudo systemctl start httpd
sudo systemctl enable httpd
-------------------------------

web.tf
===========================================================================================================

provider "aws"{
  region              = "ap-south-1"
}

resource "aws_instance" "webos1" {
  ami                 = ""
  instance_type       = "t2.micro"
  security_groups     = ["launch-wizard-1"]
  key_name            = "terraform1"

  tags = {
    Name  = "web server by TF1"
  }

  connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/root/terraform2.pem")
    host        = self.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd -y",
      "sudo yum install php -y",
      "sudo systemctl start httpd",
      "sudo systemctl enable httpd",
      "echo 'httpd version:' && httpd -v",
      "echo 'php version:' && php -v",
    ]
  }
}

resource "null_resource" "nullremote1" {
  triggers = {
    instance_id = aws_instance.webos1.id
  }
  depends_on = [aws_instance.webos1]
}

resource "aws_ebs_volume" "example" {
  availability_zone = aws_instance.webos1.availability_zone
  size              = 1

tags = {
  Name = "Web Server HD by TF11"
  }
}  

resource "aws_volume_attachment" "ebs_att" { 
  device_name = "/dev/sdc"
  volume_id    = aws_ebs_volume.example.id
  instance_id = aws_instance.webos1.id
 }

resource "null_resource" "nullremote2" {

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/root/terraform2.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo mkfs.ext4 /dev/xvdc",
      "sudo mount /dev/xvdc /var/www/html",
    ]
      on_failure = continue
  }
}


resource "null_resource" "nullremote3" {

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/root/terraform2.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo yum install git -y",
      "sudo git clone https://github.com/snaveen457/naveenM.git var/www/html", 
    ]
  }
}

===========================================================================================================================================================

terraform apply
rpm -q php
rpm -q httpd
sudo fdisk 
----------------------------------------------

provider "aws" {
  region                   = "ap-south-1"
  profile                  = "default"
}
resource "aws_instance" "webos1" {
  ami              = "ami_id"
  instance_type    = "t2.micro"
  security_groups  = [ "webport-allow" ]
  key_name         = "terraform_key"
  
  tags = {
    Name = "Web Server by TF"
  }

resource "null_resource" "nullremote1"

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/give path/terraform_key.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd -y",
      "sudo yum install php -y",
      "sudo systemctl start httpd",
      "sudo systemctl enable httpd"
    ]
  }
  resource "aws_ebs_volume" "example" {
availability_zone = aws_instance.webos1.availability_zone
size              = 1

tags = {
  Name = "Web Server HD by TF"
  }
}  
resource "aws_volume_attachment" "ebs_att"{
  device_name = "/dev/sdc"
  volme_id    = aws_ebs_volume.example.id
  instance_id = aws_instance.webos1.id
 }
}

resource "null_resource" "nullremote2" {

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/give path/terraform_key.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo mkfs.ext4 /dev/xvdc",
      "sudo mount /dev/xvdc /var/www/html",
    ]
  }
}

resource "null_resource" "nullremote4" {

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/give path/terraform_key.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo yum install git -y",
      "sudo git clone link ",
    ]
  }
}

resource "null_resource" "nullremote5" {

provisioner "local-exec" {
   command = "chrome http://13.232.50.58/web/index.php "
  }
}

terraform-apply -auto-approve
=======================================================================================================
mkdir AWS-WS1
CD AWS-WS1
vi provider.tf

provider.tf
------------
provider "aws" {
  region                   = "ap-south-1"
  profile                  = "default"
}

---------------------------------------------
vi ec2.tf
-----------
resource "aws_instance" "webos1" {
  ami              = "ami_id"
  instance_type    = "t2.micro"
  security_groups  = [ "webport-allow" ]
  key_name         = "terraform_key"
  
  tags = {
    Name = "Web Server by TF"
  }

}
-----------------------------------------------
terrform init
terraform plan 
-----------------------------------------------
vi block.tf
-------------
resource "aws_ebs_volume" "example" {
  availability_zone = aws_instance.webos1.availability_zone
  size              = 1

  tags = {
    Name = "Web Server HD by TF"
  }
}  
----------------------------------------------------------
vi attach_block.tf
------------------
resource "aws_volume_attachment" "ebs_att"{
  device_name  = "/dev/sdc"
  volme_id     = aws_ebs_volume.example.id
  instance_id  = aws_instance.webos1.id
  force_detach = true
 }
}
---------------------------------------------
terraform plan
terraform apply
.tfstate (Terraform state) --> what is currently available to get all the information to store in one local file that file is called Terraform state
1) Desired State --> what is instruct code
2) Current state  --> what is there right now, all ready created or already available is called current state
------------------------------------
vi output.tf
------------------
output "myip"{
value = aws_instance.webos1.public_ip
}
---------------------------------------
terraform apply  --> it will print public ip
teraform refresh  --> they go to cloud retrive all the information about resources
-------------------------------------------------------------
vi appache.tf
--------------
resource "null_resource" "nullremote1"
depends_on = [
  aws_volume_attachment.ebs_att
]
connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/ec2 give path/terraform_key.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd -y",
      "sudo yum install php -y",
      "sudo systemctl start httpd",
      "sudo systemctl enable httpd"
      "sudo mkfs.ext4 /dev/xvdc",
      "sudo mount /dev/xvdc /var/www/html",
      "sudo yum install git -y",
      "sudo git clone link /var/www/html" 
    ]
  }  
}

==================================================================================================================================================================
vi provider.tf
---------------
provider "aws" {
  region                   = "ap-south-1"
  profile                  = "default"
}

vi ec2.tf
---------
resource "aws_instance" "webos1" {
  ami                 = "ami-0b08bfc6ff7069aff"
  instance_type       = "t2.micro"
  security_groups     = ["launch-wizard-1"]
  key_name            = "terraform1"

  tags = {
    Name  = "web server by TF11"
  }
}

vi output.tf
------------
output "myip"{
value = aws_instance.webos1.public_ip
}

vi block.tf
------------
resource "aws_ebs_volume" "example" {
  availability_zone = aws_instance.webos1.availability_zone
  size              = 1

tags = {
  Name = "Web Server HD by TF11"
  }
}

vi attach_block.tf
------------------
resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdc"
  volume_id    = aws_ebs_volume.example.id
  instance_id = aws_instance.webos1.id
  force_detach = true
}

vi apache.tf
------------
resource "null_resource" "nullremote1" {

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/root/terraform2.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd -y",
      "sudo yum install php -y",
      "sudo systemctl start httpd",
      "sudo systemctl enable httpd",
    ]
  }
}

================================================================================================================================================================

----------------------------------------------
terraform init --> it will create null resources, null means no cloud, no aws, no gcp, no azure.(independent plugin)
--------------------------------------------------------------------------------------------------------------------------------
Multicloud Terraform
----------------------
datatypes
-------------
provider.tf
------------
provider "aws" {
  region                   = "ap-south-1"
  profile                  = "default"
}
provider "google" {
  project                 = "lwteraproject1"
  region                  = "ap-south-1"
  credentials             = "lwteraproject-key.json"
}

-------------------------------------------
variables.tf
------------
variable "x"{
#   default = "hello"
    type=string
}
output "o1"{
value = var.x
}
-------------------------
variable "x"{
   default = "t2.micro"
    type=string
}
output "o1"{
value = var.x
}


variable "x"{}
 output "o1"{
   value = var.x
}

----------------------------------------------
aws_main.tf
-----------
resource "aws_instance" "web" {
  ami              = "ami_id"
  instance_type    = var.x
  
}
---------------------------------------------
terraform apply -var="x=t2.micro"
--------------------------------------
terraform.tfvars
---------------------
x="t2.large"
---------------------
terraform apply -var-file=c.tfvars
--------------------------------------
vpc
=====
1. create network/vpc/office:
give name
cidr/n/w name: 10.0.0.0/16
2. create igw
name
3. attach igw step2 with vpc: step 1
4. create subnet/labs: 2
count =2
name: unique name: loop concept
5. create routing table
internet: 0.0.0.0/0 go to igw : step2
6. route table associated with respetive subnet
------------------------------------------
mkdir vpc
cd vpc
------
providers.tf
------------
provider "aws" {
     region = var.aws_region
     profile = "default"
}

variables.tf
--------------
variable "aws_region" {
    default = "ap-south-1"
}

variable "vpc_cidr" {
    default = "10.0.0.0/16"
}

variable "subnets_cidr" {
    type = list
    default = [ "10.0.1.0/24" , "10.0.2.0/24" ]
}

variable "azs" {
    default = [ "ap-south-1a" , "ap-south-1b" ]
}

vpc.tf
------
resource "aws_vpc" "main" {
  cidr_block       = var.vpc_cidr
  instance_tenancy = "default"
  tags = {
    Name = "myvpc"
  } 
}
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "myigw"
  }
}

resource "aws_subnet" "main" {
  count = length(var.subnets_cidr)
  vpc_id     = aws_vpc.main.id
  cidr_block = element ( var.subnets_cidr, count.index )
  availability_zone = element ( var.azs, count.index )
  map_public_ip_on_launch = true
tags = {
    Name = "subnet-${count.index + 1}"
  }
}

resource "aws_route_table" "example" {
  vpc_id = aws_vpc.main.id
route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
 tags = {
    Name = "MypublicRT"
  }
}  

resource "aws_route_table_association" "a" {
  count = length(var.subnets_cidr)
  subnet_id      = element(aws_subnet.main.*.id, count.index)
  route_table_id = aws_route_table.example.id
}
==================================================================================================================================================================
vi provider.tf
--------------
provider "aws" {
     region = var.aws_region
     profile = "default"
}

vi variables.tf
---------------
variable "aws_region" {
    default = "ap-south-1"
}

variable "vpc_cidr" {
    default = "10.0.0.0/16"
}

variable "subnets_cidr" {
    type = list
    default = [ "10.0.1.0/24" , "10.0.2.0/24" ]
}

variable "azs" {
    default = [ "ap-south-1a" , "ap-south-1b" ]
}


vi vpc.tf
----------

resource "aws_vpc" "main" {
  cidr_block       = var.vpc_cidr
  tags = {
    Name = "myvpc"
  }
}
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "myigw"
  }
}

resource "aws_subnet" "main" {
  count = length(var.subnets_cidr)
  vpc_id     = aws_vpc.main.id
  cidr_block = element ( var.subnets_cidr, count.index )
  availability_zone = element ( var.azs , count.index )
   map_public_ip_on_launch = true
tags = {
    Name = "subnet-${count.index + 1}"
  }
}


resource "aws_route_table" "example" {
  vpc_id = aws_vpc.main.id

route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

 tags = {
    Name = "MypublicRT"
  }
}  

resource "aws_route_table_association" "a" {
  count = length(var.subnets_cidr)
  subnet_id      = element(aws_subnet.main.*.id, count.index)
  route_table_id = aws_route_table.example.id
}


==================================================================================================================================================================
f.tf
----
output "o1" {
value = length(["a", "b", "c" ])
}

output "o2" {
value = index([a", "b", "c"], "b")
}

output "o3" {
value = element(["a", "b", "c" ] , count.index)
}
-------------------------------------
terraform apply
------------------------
mkdir modules
mkdir ec2
Module
=================
main.tf
-------
provider "aws"{
     region = "ap-south-1"
     profile = "default"
}
resource "aws_instance" "web" {
  ami           = ""
  instance_type = var.mytype
tags = {
    Name = "HelloWorld"
  }
}
-----------------------------------
var.tf
------
variable "mytype" {
 default = t2.small
}
------------------------------
mkdir dev
mkdir prod

cd dev
------
vi dev.tf
------
module "mydevm" {

source = "/root/modules/ec2"
mytype = "t2.micro"

}
----------------------
terraform init
terraform apply
---------------------
cd prod
----------
 vi prod.tf
 ------------
 module "myprod" {

source = "/root/modules/ec2"
mytype = "t2.micro"

}
---------------------------------------------
mkdir myvpc
----------
cd myvpc

vi main.tf
--------------
provider "aws" {
region = "ap-south-1"
profile = "default"
}

module "vpc" {
  source = "/root/vpc"
}
-------------------------
provider "aws" {
region = "ap-south-1"
profile = "default"
}
module "block" {

  source = "/root/aws-ws1"
}
=======================================================================================================

-----------------------------
Function
=========
mkdir f
cd f
vi e.tf
-------
variable "aws_region" {
    default = "ap-south-1"
}

variable "ami" {
  type = map
  default = {
    "us-east-1" = "ami-222222"
    "us-west-1" = "ami-333333"
    "ap-south-1" = "ami-111111"
}
}

resource "aws_instance" "web" {
  ami              = lookup( var.ami , var.region, "ami-444444" )
  instance_type    = "t2.micro"
  
  tags = {
    Name = "Web Server by TF"
  }
}

output "o1" {
value = lookup( var.ami , var.region, "ami-444444" )
}

terraform apply
--------------------------------------------------------
SG
==
mkdir sg
cd sg
------
vi sg.tf
----
provider "aws" {
  region = "ap-south-1"
  profile = "default"
}

resource "aws_security_group" "s1" {
  name        = "mysg1"
ingress {
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
}
resource "aws_security_group" "s2" {
  name        = "mysg2"
ingress {
    from_port        = 81
    to_port          = 81
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
}
resource "aws_security_group" "s3" {
  name        = "mysg3"
ingress {
    from_port        = 8080
    to_port          = 8080
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
}
terraform init
---------------------------------------
dynamic blocks
=================
vi sg1.tf

provider "aws" {
  region = "ap-south-1"
  profile = "default"
}

variable "sgports" {
  type = list
  default = [ 80,81,8080,8081 ]
}
resource "aws_security_group" "s1" {
  name        = "mysg"
dynamic "ingress" {
   for_each = var.sgports
   content {
          from_port        = ingress.value
          to_port          = ingress.value
          protocol         = "tcp"
          cidr_blocks      = ["0.0.0.0/0"]
          }
              }
}
----------------------------------------------------
Remote State
=============
s.tf  create instance
----
provider "aws"{
     region = "ap-south-1"
     profile = "default"
}
resource "aws_instance" "web" {:
  ami           = "ami-0b08bfc6ff7069aff"
  instance_type = "t2.micro"
tags = {
    Name = "HelloWorld"
  }
}
-------------------------------------------
s3.tf  create s3
-----
provider "aws" {
  region  = "ap-south-1"
  profile = "default"
}

resource "aws_s3_bucket" "b" {
  bucket = "my2-tf2-lw2-test2-bucket2"

  lifecycle {
    prevent_destroy = true
 }

  versioning {
    enabled = true
 }

  tags = {
    Name = "My bucket"
 }

}
-----------------------------------------
r.tf  create resource

provider "aws"{
     region = "ap-south-1"
     profile = "default"
}

terraform {
  backend "s3" {
     bucket = "my2-tf2-lw2-test2-bucket2"
     key = "my.tfstate"
     region = "ap-south-1"
    }
    
 }
 ---------------------------------------------------------
ec2.tf  in resource need to add
---------
resource "aws_instance" "web" {:
  ami           = "ami-0b08bfc6ff7069aff"
  instance_type = "t2.micro"
tags = {
    Name = "HelloWorld"
  }
}
-----------------------------------------------
dynamodb d.tf
------------
provider "aws"{
     region = "ap-south-1"
     profile = "default"
}

resource "aws_dynamodb_table" "basic-dynamodb-table" {
  name   = "tfstate-lock-table"
  read_capacity = 5
  write_capacity = 5
  hash_key = "LockID"

attribute {
  name = "LockID"
  type = "S"
  }
}
--------------------------------------------------











