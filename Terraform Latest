Terraform
===================
provider "aws" {

region = "ap-south-1"
profile = "default"

}
resource "aws_instance" "os1" {
ami = "ami id"
instance_type = "t2.micro"
tags = {
   Name = "my first TF OS 11"
   }
}

output "my_public_ip_is" {
value = aws_instance.os1.my_public_ip
}

output "my_az_is" {
value = aws_instance.os1.availability_zone
}

resource "aws_ebs_volume" "st1" {
availability_zone = aws_instance.os1.availability_zone
size              = 10

tags = {
  Name = "Linuxworld HD new"
  }
}
output "02"{
value = aws_ebs_volume.st1
}

resource "aws_volume_attachment" "st1"{
  device_name = "/dev/sdh"
  volme id    = aws_ebs_volume.st1
  instance_id = aws_instance_os1.id
}

==========================================
ami- id
t2.micro
SG: webport-allow 80
terraform_key.pem
public ip
ssh -1 ec2-user -i terraform_key.pem public_ip
sudo yum install httpd -y 
sudo yum install php -y
sudo systemctl start httpd
sudo systemctl enable httpd
--------------------------------
w -- how many users login
rpm -q php
rpm -q httpd
--------------------
web.tf
==========================

provider "aws" {
  region                   = "ap-south-1"
  profile                  = "default"
}
resource "aws_instance" "webos1" {
  ami              = "ami_id"
  instance_type    = "t2.micro"
  security_groups  = [ "webport-allow" ]
  key_name         = "terraform_key"
  
  tags = {
    Name = "Web Server by TF"
  }

resource "null_resource" "nullremote1"

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/give path/terraform_key.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd -y",
      "sudo yum install php -y",
      "sudo systemctl start httpd",
      "sudo systemctl enable httpd"
    ]
  }

---------------------------------------------------
terraform apply
rpm -q php
rpm -q httpd
sudo fdisk 
----------------------------------------------

provider "aws" {
  region                   = "ap-south-1"
  profile                  = "default"
}
resource "aws_instance" "webos1" {
  ami              = "ami_id"
  instance_type    = "t2.micro"
  security_groups  = [ "webport-allow" ]
  key_name         = "terraform_key"
  
  tags = {
    Name = "Web Server by TF"
  }

resource "null_resource" "nullremote1"

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/give path/terraform_key.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd -y",
      "sudo yum install php -y",
      "sudo systemctl start httpd",
      "sudo systemctl enable httpd"
    ]
  }
  resource "aws_ebs_volume" "example" {
availability_zone = aws_instance.webos1.availability_zone
size              = 1

tags = {
  Name = "Web Server HD by TF"
  }
}  
resource "aws_volume_attachment" "ebs_att"{
  device_name = "/dev/sdc"
  volme_id    = aws_ebs_volume.example.id
  instance_id = aws_instance.webos1.id
 }
}

resource "null_resource" "nullremote2" {

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/give path/terraform_key.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo mkfs.ext4 /dev/xvdc",
      "sudo mount /dev/xvdc /var/www/html",
    ]
  }
}

resource "null_resource" "nullremote4" {

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/give path/terraform_key.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo yum install git -y",
      "sudo git clone link ",
    ]
  }
}

resource "null_resource" "nullremote5" {

provisioner "local-exec" {
   command = "chrome http://13.232.50.58/web/index.php "
  }
}

terraform-apply -auto-approve
-------------------------------------------------------------------
mkdir AWS-WS1
CD AWS-WS1
vi provider.tf

provider.tf
------------
provider "aws" {
  region                   = "ap-south-1"
  profile                  = "default"
}

---------------------------------------------
vi ec2.tf
-----------
resource "aws_instance" "webos1" {
  ami              = "ami_id"
  instance_type    = "t2.micro"
  security_groups  = [ "webport-allow" ]
  key_name         = "terraform_key"
  
  tags = {
    Name = "Web Server by TF"
  }

}
-----------------------------------------------
terrform init
terraform plan 
-----------------------------------------------
vi block.tf
-------------
resource "aws_ebs_volume" "example" {
  availability_zone = aws_instance.webos1.availability_zone
  size              = 1

  tags = {
    Name = "Web Server HD by TF"
  }
}  
----------------------------------------------------------
vi attach_block.tf
------------------
resource "aws_volume_attachment" "ebs_att"{
  device_name  = "/dev/sdc"
  volme_id     = aws_ebs_volume.example.id
  instance_id  = aws_instance.webos1.id
  force_detach = true
 }
}
---------------------------------------------
terraform plan
terraform apply
.tfstate (Terraform state) --> what is currently available to get all the information to store in one local file that file is called Terraform state
1) Desired State --> what is instruct code
2) Current state  --> what is there right now, all ready created or already available is called current state
------------------------------------
vi output.tf
------------------
output "myip"{
value = aws_instance.webos1.public_ip
}
---------------------------------------
terraform apply  --> it will print public ip
teraform refresh  --> they go to cloud retrive all the information about resources
-------------------------------------------------------------
vi appache.tf
--------------
resource "null_resource" "nullremote1"
depends_on = [
  aws_volume_attachment.ebs_att
]
connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("/ec2 give path/terraform_key.pem")
    host        = aws_instance.webos1.public_ip
  }
provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd -y",
      "sudo yum install php -y",
      "sudo systemctl start httpd",
      "sudo systemctl enable httpd"
      "sudo mkfs.ext4 /dev/xvdc",
      "sudo mount /dev/xvdc /var/www/html",
      "sudo yum install git -y",
      "sudo git clone link /var/www/html" 
    ]
  }  
}
----------------------------------------------
terraform init --> it will create null resources, null means no cloud, no aws, no gcp, no azure.(independent plugin)
--------------------------------------------------------------------------------------------------------------------------------
Multicloud Terraform
----------------------
datatypes
-------------
provider.tf
------------
provider "aws" {
  region                   = "ap-south-1"
  profile                  = "default"
}
provider "google" {
  project                 = "lwteraproject1"
  region                  = "ap-south-1"
  credentials             = "lwteraproject-key.json"
}

-------------------------------------------
variables.tf
------------
variable "x"{
#   default = "hello"
    type=string
}
output "o1"{
value = var.x
}
-------------------------
variable "x"{
   default = "t2.micro"
    type=string
}
output "o1"{
value = var.x
}


variable "x"{}
 output "o1"{
   value = var.x
}

----------------------------------------------
aws_main.tf
-----------
resource "aws_instance" "web" {
  ami              = "ami_id"
  instance_type    = var.x
  
}
---------------------------------------------
terraform apply -var="x=t2.micro"
--------------------------------------
terraform.tfvars
---------------------
x="t2.large"
---------------------
terraform apply -var-file=c.tfvars
--------------------------------------
vpc
=====
1. create network/vpc/office:
name
cidr/n/w name: 10.0.0.0/16
2. create igw
name
3. attach igw step2 with vpc: step 1
4. create subnet/labs: 2
count =2
name: unique name: loop concept
5. create routing table
internet: 0.0.0.0/0 go to igw : step2
6. route table associated with respetive subnet
------------------------------------------
mkdir vpc
cd vpc
------
providers.tf
------------
provider "aws"{
     region = var.aws_region
     profile = "default"
}

variables.tf
--------------
variable "aws_region" {
    default = "ap-south-1"
}

variable "vpc_cidr" {
    default = "10.0.0.0/16"
}

variable "subnets_cidr" {
    type = list
    default = [ "10.0.1.0/24" , "10.0.2.0/24" , ]
}

variable "azs" {
    default = [ "ap-south-1a" , "ap-south-1b" ]
}

vpc.tf
------
resource "aws_vpc" "main" {
  cidr_block       = var.vpc_cidr
  instance_tenancy = "default"
  tags = {
    Name = "myvpc"
  } 
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "myigw"
  }
}

resource "aws_subnet" "main" {
  count = length(var.subnets_cidr)
  vpc_id     = aws_vpc.main.id
  cidr_block = element(var.subnet_cidr, count.index )
  availability_zone = element(var.azs , count.index )
  map_public_ip_on_launch = true
tags = {
    Name = "subnet -${count.index + 1}"
  }
}

resource "aws_route_table" "example" {
  vpc_id = aws_vpc.main.id
route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
 tags = {
    Name = "MypublicRT"
  }
}  

resource "aws_route_table_association" "a" {
  count = length(var.subnets_cidr)
  subnet_id      = element(aws_subnet.main.*.id count.index)
  route_table_id = aws_route_table.example.id
}

f.tf
----
output "o1" {
value = length["a", "b", "c" ]
}

output "o2" {
value = index("a", "b", "c"], "b)"
}

output "o3" {
value = element(["a", "b", "c" ] , count.index)
}
-------------------------------------
terraform apply
------------------------
mkdir modules
mkdir ec2
Module
=================
main.tf
-------
provider "aws"{
     region = "ap-south-1"
     profile = "default"
}
resource "aws_instance" "web" {
  ami           = "ami_id"
  instance_type = "var.mytype"
tags = {
    Name = "HelloWorld"
  }
}
-----------------------------------
var.tf
------
variable "mytype"{
 default = t2.small
}
------------------------------
mkdir dev
mkdir prod

cd dev
------
vi dev.tf
------
module "mydevm" {

source = "../modules/ec2"
mytype = "t2.micro"

}
----------------------
terraform init
terraform apply
---------------------
cd prod
----------
 vi prod.tf
 ------------
 module "myprod" {

source = "../modules/ec2"
mytype = "t2.micro"

}
-----------------------------





























