Terraform
============
1) Introduction of Terraform
2) Diff b/w Terraform and clod formation
3) Installation
4) Create IAM User
5)First Terraform script
6)Terraform commands

Installation of Terraform
-----------------------
terrform installation video on youtube link:
https://www.youtube.com/watch?v=kxOR-WrK4y8

#Login as a root user in ec2 instance
sudo su -

#You will need to upgrade your system and packages
yum update -y

#Install wget and unzip packages
yum install wget unzip vim -y

#Download the terraform software.
#Use https://www.terraform.io/downloads.html to download the terraform software.

wget https://releases.hashicorp.com/terraform/1.3.3/terraform_1.3.3_linux_amd64.zip

#Extract the terraform software.
unzip terraform_1.3.3_linux_amd64.zip -d /usr/local/bin/

#Check the version
terraform -v (OR) terraform version 
terrform -help for detail commands

go to IAM user



provider "aws" {
  region = "ap-southeast-2"
  access_key = "AKIARCEVQ4RXLZT7MYE3"
  secret_key = "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"
}

resource "aws_instance" "AWSEC2Instance" {
  ami = "ami-047dcdc46ac4f2e6b"
  instance_type = "t2.micro"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]
  tags = {
   Name = "Terrafrom Server"
  }
}

AKIARCEVQ4RXLZT7MYE3  ACcess
VukA+oS4shpEk7Q/MzUQqraVsa1VSoFhnLoo/M01

400 status code - bad request
terraform init
terraformt fmt
terrafoem validate
terraform apply
terraform apply -auto-approve  it will not ask yes confirmaton

Create Multiple Resources
===============================
using count argument, we can pass the number of resources we need, as follows.

provider "aws" {
  region = "ap-southeast-2"
  access_key = "AKIARCEVQ4RXLZT7MYE3"
  secret_key = "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"
}

resource "aws_instance" "AWSEC2Instance" {
  count = "5"
  ami = "ami-047dcdc46ac4f2e6b"
  instance_type = "t2.micro"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]
  tags = {
   Name = "Terrafrom Server"
  }
}

AWS Credentials
Comments
=========
The Terraform language supports three different syntaxes for comments:
a)# begins a single-line comment, ending at the end of the line.
b)//also begins a single-line comment, as an alternative to #.
c)/* and */ are start and end delimiters for a comment that might span over multiple lines
Bash Scritpting
--------------
# --> single line represent
<< --> Multi line represent

java/Groovy Script
------------------
// --> single line represent

/*  (start)

*/ (end) --> Multi line represent

Terraform
--------
// or # --> single line represent

/*  (start)

*/ (end) --> Multi line represent

provider "aws" {
  region = "ap-southeast-2"
 # access_key = "AKIARCEVQ4RXLZT7MYE3"
  //secret_key = "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"
}

resource "aws_instance" "AWSEC2Instance" {
  count = "5"
  ami = "ami-047dcdc46ac4f2e6b"
  instance_type = "t2.micro"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]
  tags = {
   Name = "Terrafrom Server"
  }
}

Environment Variables
----------------------
export AWS_ACCESS_KEY_ID="AKIARCEVQ4RXLZT7MYE3"
export AWS_SECRET_ACCESS_KEY="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"
terraform destroy
export AWS_DEFAULT_REGION= "ap-southeast-2"
provider "aws" {
 region = "ap-southeast-2"
}

In real-time world, the project has more variables, it is diifficult maintain the variables in terraform script, 
instead we will put the variables in a separate file called vars.tf as follows

file Name: vars.tf
----------------------------------------------------
variable "ami"{
           default="ami-047dcdc46ac4f2e6b"
}

variable"instance_type"{
          default= "t2.micro"
}
----------------------------------------------------
Variables..
Now terraform looks like below
----------------------------------------------------
provider "aws" {
          region = "ap-southeast-2"
}

resource "aws_instance" "AWSEC2Instance" {
          ami = "$(var.ami)"
          instance_type = "$(var.instance_type)"
          key_name = "terraform"
          security_groups = ["launch-wizard-1"]
 tags={
  Name= "Terrafrom Server"
 }
}
---------------------------------------------------------
mkdir varsdemo
cd varsdemo
vi vars.tf
variable "ami"{
  default="ami-047dcdc46ac4f2e6b"
}

variable"instance_type"{
 default= "t2.micro"
}

vi varsdemo.tf
provider "aws" {
          region = "ap-southeast-2"
}

resource "aws_instance" "AWSEC2Instance" {
          ami = "$(var.ami)"
          instance_type = "$(var.instance_type)"
          key_name = "terraform"
          security_groups = ["launch-wizard-1"]
 tags={
          Name= "Terrafrom Server"
 }
}

 terraform plan
  terraform init
  ls -la inside .terraform folder will create
   terraform apply -auto-approve

----------------------------------------------
provider "aws" {
          region = "ap-southeast-2"
}

resource "aws_instance" "AWSEC2Instance" {
          ami = "$(var.ami-)"
          instance_type = "$(var.instance_type)"
          key_name = "terraform"
          security_groups = ["launch-wizard-1"]
 tags={
          Name= "Terrafrom Server"
 }
-------------------------------------------------

variable "ami"{
 description = "AMI Name..."
 default = "ami-047dcdc46ac4f2e6b"
}

variable "instance_type"{
 description = "instance_Type..."
 default = "t2.micro"
}

variable "instances"{
 description = "Number of instances..."
 default = "2"
}
-----------------------------------------
count.tf
--------------------------------------
provider "aws"{
 region = "ap-southeast-2"
}

resource "aws_instance" "AWSServer" {
  count = "${var.instances}"
  ami = "${var.ami}"
  instance_type = "${var.instance_type}"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]

  tags = {
   Name = "Terrafrom Server - MSS - ${count.index}"
 }
}
----------------------------------------------------
userdata
=============
----------------------------
mkdir userdata

vi installAppacheServer.sh

#!/bin/bash

sudo yum install httpd -y
sudo systemctl enable httpd
sudo systemctl start httpd
---------------------------------
ls

chmod u=x installAppacheServer.sh

vi var.tf
--------------------------
vi userdata.tf
variable "ami"{
 description = "AMI Name..."
 default = "ami-047dcdc46ac4f2e6b"
}

variable "instance_type"{
 description = "instance_Type..."
 default = "t2.micro"
}
------------------------------------
provider "aws"{
 region = "ap-southeast-2"
}

resource "aws_instance" "AWSServer" {
  ami = "${var.ami}"
  instance_type = "${var.instance_type}"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]
  user_data = "${file("installAppacheServer.sh")}"
  tags = {
   Name = "Terrafrom Server - MSS"
 }
------------------------------------------
Security group
===================
provider "aws"{
 region = "ap-southeast-2"
}

resource "aws_security_group" "AWSSG" {
  name = "SGByTerrafrom"
  description = "This Security Group by MSS"
  vpc_id = "vpc-016a92f71226e5eb0"

  ingress{
   from_port = 80
   to_port = 80
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
 }

  egress{
   from_port = 443
   to_port = 443
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
 }

tags = {
 name = "SGbyMSS"
  }
}
----------------------------------------                 
IAM User Creation
==================
mkdir iamuser
cd iamuser
vi iamuser.tf


provider "aws"{
 region = "ap-southeast-2"
}
resource "aws_iam_user" "IAMUSER" {
name = "Naveen"
}

---------------
var.tf

variable "user_names"{
  type = list(string)
  default = ["balaji","manan","MithunsoftwareSolutions"]
}

provider "aws"{
 region = "ap-southeast-2"
}
resource "aws_iam_user" "IAMUSER" {
count = length(var.user_names)
name = var.user_names[count.index]
}




























