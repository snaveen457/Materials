Terraform
============
1) Introduction of Terraform
2) Diff b/w Terraform and clod formation
3) Installation
4) Create IAM User
5)First Terraform script
6)Terraform commands
--------------------------------------
1) Introduction of Terraform
==================================
Terraform is an open-source, infrastructure as code softrware(IAC) tool, created by HashiCorp and written in the
Go Programming language.
infrastructure as code is the processof managing infrstructure in a file or files, rather than manually
configuring resources in a user interface(UI).
Here resources are nothing but virtual machines (ec2), Elastic IP, Security Groups,Network Interfaces..
Terraform code is written in the Hashicorp Configuration Language (HCL) in files with the extension .tf
Terraform allows users to use Hashicorp Configuration Language (HCL) to create the files containing definitions of their desired resources
on almost any provider(AWS,GCP,Azure,Digital Ocean,OpenStack. ect) and automate the creation of those resources at the time of apply.

2) Diff b/w Terraform and clod formation
=====================================
Terraform
------------
Terraform is developed by Hashicorp
it will work for many cloud providers like provider(AWS,GCP,Azure,Digital Ocean,OpenStack. ect) 
Terraform uses Hashicorp Configuration Language (HCL), a language built by Hashicorp. it is fully compatible with JSON.

Cloud Formation
====================
Cloud formation is developed by AWS
Cloud formation will support only AWS
AWS Cloud formation utilizes either JSON or YAML. Cloud formation has a limit of 51,000 bytes for the template body itself.

Pre-Requisites
=================
Any cloud provider(AWS,GCP,Azure,Digital Ocean,OpenStack. ect)
IAM user credential(Secret Key and Access Key)

Add the following policies to IAM user if you are using AWS as cloud provider.
AmazonEC2FullAccess.

3) Installation of Terraform
====================================
terrform installation video on youtube link:
https://www.youtube.com/watch?v=kxOR-WrK4y8

#Login as a root user in ec2 instance
sudo su -

#You will need to upgrade your system and packages
yum update -y

#Install wget and unzip packages
yum install wget unzip vim -y

#Download the terraform software.
#Use https://www.terraform.io/downloads.html           to download the terraform specific version software.

wget https://releases.hashicorp.com/terraform/1.3.3/terraform_1.3.3_linux_amd64.zip

#Extract the terraform software.
unzip terraform_1.3.3_linux_amd64.zip -d /usr/local/bin/

#Check the version
terraform -v (OR) terraform version 
terrform -help for detail commands

4) Create IAM user
==================
go to services, search IAM, click on users, create user,click on add user, give user name(Terraform),select and check programmatic access,
click on next, go to attach existing policies, AmazonEC2fullAccess, Amazons3fullACcess,AmazonvpcfullACcess. click next,
click on create user, it will show acces key and secret key.


FirstTerraformScript.tf
-----------------------

provider "aws" {
  region = "ap-southeast-2"
  access_key = "AKIARCEVQ4RXLZT7MYE3"
  secret_key = "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"
}

resource "aws_instance" "AWSEC2Instance" {
  ami = "ami-047dcdc46ac4f2e6b"
  instance_type = "t2.micro"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]
  tags = {
   Name = "Terrafrom Server"
  }
}

AKIARCEVQ4RXLZT7MYE3  ACcess
VukA+oS4shpEk7Q/MzUQqraVsa1VSoFhnLoo/M01

400 status code - bad request
terraform init
terraformt fmt
terrafoem validate
terraform apply
terraform apply -auto-approve  it will not ask yes confirmaton

Create Multiple Resources
===============================
using count argument, we can pass the number of resources we need, as follows.

provider "aws" {
  region = "ap-southeast-2"
  access_key = "AKIARCEVQ4RXLZT7MYE3"
  secret_key = "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"
}

resource "aws_instance" "AWSEC2Instance" {
  count = "5"
  ami = "ami-047dcdc46ac4f2e6b"
  instance_type = "t2.micro"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]
  tags = {
   Name = "Terrafrom Server"
  }
}

AWS Credentials
Comments
=========
The Terraform language supports three different syntaxes for comments:
a)# begins a single-line comment, ending at the end of the line.
b)//also begins a single-line comment, as an alternative to #.
c)/* and */ are start and end delimiters for a comment that might span over multiple lines
Bash Scritpting
--------------
# --> single line represent
<< --> Multi line represent

java/Groovy Script
------------------
// --> single line represent

/*  (start)

*/ (end) --> Multi line represent

Terraform
--------
// or # --> single line represent

/*  (start)

*/ (end) --> Multi line represent

provider "aws" {
  region = "ap-southeast-2"
 # access_key = "AKIARCEVQ4RXLZT7MYE3"
  //secret_key = "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"
}

resource "aws_instance" "AWSEC2Instance" {
  count = "5"
  ami = "ami-047dcdc46ac4f2e6b"
  instance_type = "t2.micro"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]
  tags = {
   Name = "Terrafrom Server"
  }
}

Environment Variables
----------------------
export AWS_ACCESS_KEY_ID="AKIARCEVQ4RXLZT7MYE3"
export AWS_SECRET_ACCESS_KEY="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"
terraform destroy
export AWS_DEFAULT_REGION= "ap-southeast-2"
provider "aws" {
 region = "ap-southeast-2"
}

In real-time world, the project has more variables, it is diifficult maintain the variables in terraform script, 
instead we will put the variables in a separate file called vars.tf as follows

file Name: vars.tf
----------------------------------------------------
variable "ami"{
           default="ami-047dcdc46ac4f2e6b"
}

variable"instance_type"{
          default= "t2.micro"
}
----------------------------------------------------
Variables..
Now terraform looks like below
----------------------------------------------------
provider "aws" {
          region = "ap-southeast-2"
}

resource "aws_instance" "AWSEC2Instance" {
          ami = "$(var.ami)"
          instance_type = "$(var.instance_type)"
          key_name = "terraform"
          security_groups = ["launch-wizard-1"]
 tags={
  Name= "Terrafrom Server"
 }
}
---------------------------------------------------------
mkdir varsdemo
cd varsdemo
vi vars.tf
variable "ami"{
  default="ami-047dcdc46ac4f2e6b"
}

variable"instance_type"{
 default= "t2.micro"
}

vi varsdemo.tf
provider "aws" {
          region = "ap-southeast-2"
}

resource "aws_instance" "AWSEC2Instance" {
          ami = "$(var.ami)"
          instance_type = "$(var.instance_type)"
          key_name = "terraform"
          security_groups = ["launch-wizard-1"]
 tags={
          Name= "Terrafrom Server"
 }
}

 terraform plan
  terraform init
  ls -la inside .terraform folder will create
   terraform apply -auto-approve

----------------------------------------------
provider "aws" {
          region = "ap-southeast-2"
}

resource "aws_instance" "AWSEC2Instance" {
          ami = "$(var.ami-)"
          instance_type = "$(var.instance_type)"
          key_name = "terraform"
          security_groups = ["launch-wizard-1"]
 tags={
          Name= "Terrafrom Server"
 }
-------------------------------------------------

variable "ami"{
 description = "AMI Name..."
 default = "ami-047dcdc46ac4f2e6b"
}

variable "instance_type"{
 description = "instance_Type..."
 default = "t2.micro"
}

variable "instances"{
 description = "Number of instances..."
 default = "2"
}
-----------------------------------------
count.tf
--------------------------------------
provider "aws"{
 region = "ap-southeast-2"
}

resource "aws_instance" "AWSServer" {
  count = "${var.instances}"
  ami = "${var.ami}"
  instance_type = "${var.instance_type}"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]

  tags = {
   Name = "Terrafrom Server - MSS - ${count.index}"
 }
}
----------------------------------------------------
userdata
=============
----------------------------
mkdir userdata

vi installAppacheServer.sh

#!/bin/bash

sudo yum install httpd -y
sudo systemctl enable httpd
sudo systemctl start httpd
---------------------------------
ls

chmod u=x installAppacheServer.sh

vi var.tf
--------------------------
vi userdata.tf
variable "ami"{
 description = "AMI Name..."
 default = "ami-047dcdc46ac4f2e6b"
}

variable "instance_type"{
 description = "instance_Type..."
 default = "t2.micro"
}
------------------------------------
provider "aws"{
 region = "ap-southeast-2"
}

resource "aws_instance" "AWSServer" {
  ami = "${var.ami}"
  instance_type = "${var.instance_type}"
  key_name = "terraform"
  security_groups = ["launch-wizard-1"]
  user_data = "${file("installAppacheServer.sh")}"
  tags = {
   Name = "Terrafrom Server - MSS"
 }
------------------------------------------
Security group
===================
provider "aws"{
 region = "ap-southeast-2"
}

resource "aws_security_group" "AWSSG" {
  name = "SGByTerrafrom"
  description = "This Security Group by MSS"
  vpc_id = "vpc-016a92f71226e5eb0"

  ingress{
   from_port = 80
   to_port = 80
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
 }

  egress{
   from_port = 443
   to_port = 443
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
 }

tags = {
 name = "SGbyMSS"
  }
}
----------------------------------------                 
IAM User Creation
==================
mkdir iamuser
cd iamuser
vi iamuser.tf


provider "aws"{
 region = "ap-southeast-2"
}
resource "aws_iam_user" "IAMUSER" {
name = "Naveen"
}

---------------
var.tf

variable "user_names"{
  type = list(string)
  default = ["balaji","manan","MithunsoftwareSolutions"]
}

provider "aws"{
 region = "ap-southeast-2"
}
resource "aws_iam_user" "IAMUSER" {
count = length(var.user_names)
name = var.user_names[count.index]
}




























